#!/bin/sh

# Author : Nikodem Babirad
# Login : xbabir01
# Date : March 2019
# Course : IOS
# File : wana
# Proj. number : 1
# Description : web log. analyzer

POSIXLY_CORRECT=yes

morecmds=0
command1=0
command2=0
command3=0
command4=0
command5=0
filter1=0
filter2=0
filter3=0
filter4=0
    # Zaznamenavame zadanie prikazov a filtrov... defaultne vsetky 0 = nezadane, 1= zadane
log=""
    # Log je na zaciatku prázdny a postupne sa upravuje 

    # Prechadza vsetky argumenty
while [ "$1" != "" ]; do    
    if [ "$1" = "list-ip" ] # Zistujeme ci bol zadany prikaz alebo filter
    then
    command1=1
    morecmds=$((morecmds+1))
      if [ "$morecmds" -gt "1" ]
    then
    echo "Error, too many commands!"
    exit 1
    fi
        # Kontrola aby bol vzdy zadany len jeden prikaz
    
    fi
    
    if [ "$1" = "list-hosts" ] 
    then
    command2=1
    morecmds=$((morecmds+1))
      if [ "$morecmds" -gt "1" ]
    then
    echo "Error, too many commands!"
    exit 1
    fi
    
    fi
    
    if [ "$1" = "list-uri" ] 
    then
    command3=1
    morecmds=$((morecmds+1))
      if [ "$morecmds" -gt "1" ]
    then
    echo "Error, too many commands!"
    exit 1
    fi
    
    fi
    
    if [ "$1" = "hist-ip" ] 
    then
    command4=1
    morecmds=$((morecmds+1))
    if [ "$morecmds" -gt "1" ]
    then
    echo "Error, too many commands!"
    exit 1
    fi
    
    fi
    
    if [ "$1" = "hist-load" ] 
    then
    command5=1
    morecmds=$((morecmds+1))
    
    if [ "$morecmds" -gt "1" ]
    then
    echo "Error, too many commands!"
    exit 1
    fi 
    
    fi
    
    if [ "$1" = "-a" ] 
    then
    shift
    date1=$1 # Ak je zadany filter -a shiftneme na dalsi argument a ulozime ho do premennej
    filter1=1
    fi
    
    if [ "$1" = "-b" ] 
    then
    shift
    date2=$1  # Ak je zadany filter -b shiftneme na dalsi argument a ulozime ho do premennej
    filter2=1
    fi
    
    if [ "$1" = "-ip" ] 
    then
    shift
    ip=$1 # Ak je zadany filter -ip shiftneme a dalsi argument ulozime do premennej na vyhladavanie
    filter3=1
    fi
    
    if [ "$1" = "-uri" ] 
    then
    shift
    uri=$1 # Ak je zadany filter -ip shiftneme a dalsi argument ulozime do premennej na vyhladavanie
    filter4=1
    fi
    
    case "$1" in # Ak je zadany argument log ulozime ho do premennej log
    *.log*)
    logprew=$log
        log=$(cat "$1")
        if [ -n "$logprew" ] # Ak uz log nieco obsahuje obsah logu sa concatne
        then
        log="$logprew\n$log"
        fi
    ;;
    esac
    
    case "$1" in # V pripade zadania zabaleneho suboru ho naprv rozbalime
    *.gz)
        log=$(zcat -c "$1")
        if [ -n "$logprew" ]
        then
        log="$logprew\n$log"
        fi
    ;;
    esac
     
    # While shiftuje cez vsetky argumenty
    shift
done
    # Nacitanie logu cez stdin v pripade nezadania logu do argumentu
if [ -z "$log" ]
then
log=$(cat)
fi

    # Ak log exituje vykonáva upravy cez filtre a nasledne cez prikazy
if [ -n "$log" ] 
    then

    if [ "$filter3" = "1" ] 
    then
    
    ipv6test=$(echo "$ip" | grep -E "^([0-9a-fA-F]{0,4}:){1,7}[0-9a-fA-F]{0,4}$")
    # Spravime regex a zistime ci bola zadana ip vhodna ipv6 alebo ipv4
    if [ -n "$ipv6test" ]
    then
    log=$(echo "$log" | grep "^$ip")
    else
    
    if expr "$ip" : '[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*$' >/dev/null; then
  for i in 1 2 3 4; do
    if [ "$(echo "$ip" | cut -d. -f$i)" -gt 255 ]; then
      echo "Error: ($ip) is not valid ip!"
      # V pripade zleho formatu vypiseme error a ukoncime program
  exit 1
  
    fi
  done
  log=$(echo "$log" | grep "^$ip")
     # V pripade spravneho zadania ip vyhladame ip v logu
else

  echo "Error: ($ip) is not valid ip!"
  exit 1
fi 
    echo "Error: ($ip) is not valid ipv6!"
      
  exit 1
    
    fi
    fi
     
    if [ "$filter4" = "1" ] 
    then
    log=$(echo "$log" | while read -r riadok;  
    do
        # Prechadzame po riadkoch a 7 stlpec ukladame do premennej, ktoru potom porovname so zadanou uri
    column1=$(echo "$riadok" | awk '{ print $7  }' )
    columnedited=$(echo "$column1" | awk '{if (substr($1,1,1)== "/")print $1}') # Beru sa len vhodné uri
    
    columnedited=$(echo "$columnedited" | grep ^"$uri")
    if [ -n "$columnedited"  ]
    then
    echo "$riadok"
    fi
    
    done)
    fi
    
    if [ "$filter1" = "1" ] 
    then
    datetest1=$(echo "$date1" | grep -E '^[0-9]{4}-[0-9]{2}-[0-9]{2} ([0-9][0-9]:[0-9][0-9]:[0-9][0-9])')
    if [ -z "$datetest1" ]
    then
    echo "Error, date in bad format!" # Kontrola zleho formatu datumu, v pripade zleho zadania ukonci program
    exit 1
    fi
      
    date1=$(echo "$date1" | tr -d ':' | tr -d '-' | tr -d '[:space:]' )
    log=$(echo "$log" | while read -r riadok;  # Prechadzame po riadkoch a upraveny datum porovnavame s upravenym 4 stlpcom v logu
    do
        
    column1=$(echo "$riadok" | awk '{ print $4 }' | tr -d '[' | tr ':' ' ' | tr '/' ' ')
    column1=$(echo "$column1" | sed 's/Feb/02 /'  |sed 's/Jan/01 /'  | sed 's/Mar/03 /'   | sed 's/Apr/04 /'   | sed 's/May/05 /' | sed 's/Jun/06 /'   | sed 's/Jul/07 /'   | sed 's/Aug/08 /'   | sed 's/Sep/09 /'   | sed 's/Oct/10 /'  | sed 's/Nov/11 /'  | sed 's/Dec/12 /'  | tr -s '[:space:]')
    column2=$(echo "$column1" | awk '{print $3 $2 $1 $4 $5 $6}' | tr -d '[:space:]')
    
    if [ "$column2" -gt "$date1" ]
    then
    echo "$riadok"  # Ak naslo vyhovujuci datum vypise riadok
    fi
    
    done) # Vsetko co sa vykona ulozi do logu
    fi
    
    if [ "$filter2" = "1" ] 
    then
    datetest2=$(echo "$date2" | grep -E '^[0-9]{4}-[0-9]{2}-[0-9]{2} ([0-9][0-9]:[0-9][0-9]:[0-9][0-9])')
    if [ -z "$datetest2" ]
    then
    echo "Error, date in bad format!"
    exit 1 # Kontrola zleho formatu datumu, v pripade zleho zadania ukonci program
    fi
    
    date2=$(echo "$date2" | tr -d ':' | tr -d '-' | tr -d '[:space:]' )
    log=$(echo "$log" | while read -r riadok;    # Prechadzame po riadkoch a upraveny datum porovnavame s upravenym 4 stlpcom v logu
    do
    column1=$(echo "$riadok" | awk '{ print $4 }' | tr -d '[' | tr ':' ' ' | tr '/' ' ')
    column1=$(echo "$column1" | sed 's/Feb/02 /'  |sed 's/Jan/01 /'  | sed 's/Mar/03 /'   | sed 's/Apr/04 /'   | sed 's/May/05 /' | sed 's/Jun/06 /'   | sed 's/Jul/07 /'   | sed 's/Aug/08 /'   | sed 's/Sep/09 /'   | sed 's/Oct/10 /'  | sed 's/Nov/11 /'  | sed 's/Dec/12 /'  | tr -s '[:space:]')
    column2=$(echo "$column1" | awk '{print $3 $2 $1 $4 $5 $6}' | tr -d '[:space:]')
    if [ "$column2" -lt "$date2" ]
    then
    echo "$riadok" # Ak naslo vyhovujuci datum vypise riadok
    fi
    
    done) # Vsetko co sa vykona ulozi do logu
    fi
    

    if [ "$command2" = "1" ]
    then
    column1=$(echo "$log" | awk '{ print $1 }' ) # Prikaz vypije prvy stlpec logu do premennej a upravime ho   
    column2=$(echo "$column1" | sort | uniq )
    log=$(for next in $column2  # Pre kazdy riadok vykona prikaz host a v pripade, ze host nic nevrati vypiseme povodnu ip adresu
    do
    domain=$(host "$next")
    if [ $? -eq 0 ]
    then
    column5=$(echo "$domain" | awk '{ print $5 }')
    echo "$column5"
    else 
    echo "$next"
    fi
    
    done ) # Vsetko co sa vykonalo ulozime do logu
    fi
        

    if [ "$command1" = "1" ] 
    then
    log=$(echo "$log" | awk '{ print $1 }' | sort -u) # Príkaz vypise prvy stlpec z logu sortnuty a zjednoteny
    fi
    
    if [ "$command3" = "1" ]
    then
    column1=$(echo "$log" | awk '{ print $7  }' )   # Z logu vyberieme 7 stlpec a kontrolujeme ci je vhodny uri
    columnedited=$(echo "$column1" | awk '{if (substr($1,1,1)== "/")print $1}')
    log=$(echo "$columnedited" | sort -u)
    fi
    
    
    if [ "$command4" = "1" ]
    then
    column1=$(echo "$log" | awk '{ print $1 }' | sort |  uniq -c | sort -rg)    # 
    log=$(echo "$column1" | awk '{printf $2 " ("$1 "): ";for (i = 0; i < $1;i++) {printf "#"} print ""}')   
    fi # Vypise hist v zadanom formate a na zaklade poctu vyskytu ip vypise znak
    
    
    if [ "$command5" = "1" ]
    then
    column1=$(echo "$log" | awk '{ print $4 }' | sort | tr -d '[' | tr ':' ' ' | tr '/' ' ') # Do premennej ulozime 4 stlpec, ktory upravime do vhodneho formatu na vypis
    column1=$(echo "$column1" | sed 's/Feb/02 /'  |sed 's/Jan/01 /'  | sed 's/Mar/03 /'   | sed 's/Apr/04 /'   | sed 's/May/05 /' | sed 's/Jun/06 /'   | sed 's/Jul/07 /'   | sed 's/Aug/08 /'   | sed 's/Sep/09 /'   | sed 's/Oct/10 /'  | sed 's/Nov/11 /'  | sed 's/Dec/12 /'  | tr -s '[:space:]')
    column2=$(echo "$column1" | awk '{ print $3 "-" $2 "-" $1 " " $4":00"}')
    log=$(echo "$column2" | uniq -c | awk '{printf $2 " " $3 " (" $1 "): " ;for (i = 1; i <= $1;i++) {
    printf "#"} print ""}') # Vypise hist v zadanom formate a na zaklade poctu prihlaseni z ip v danom case vypise znak
    fi
    fi
echo "$log" # Pred ukoncenim programu vypiseme log
exit 0
